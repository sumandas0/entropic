basePath: /api/v1
definitions:
  handlers.EntityListResponse:
    properties:
      entities:
        items:
          $ref: '#/definitions/handlers.EntityResponse'
        type: array
      limit:
        example: 10
        type: integer
      offset:
        example: 0
        type: integer
      total:
        example: 100
        type: integer
    type: object
  handlers.EntityRequest:
    properties:
      properties:
        type: object
      urn:
        example: urn:entropic:user:123
        type: string
    required:
    - properties
    - urn
    type: object
  handlers.EntityResponse:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      entity_type:
        example: user
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      properties:
        type: object
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      urn:
        example: urn:entropic:user:123
        type: string
      version:
        example: 1
        type: integer
    type: object
  handlers.EntitySchemaRequest:
    properties:
      entity_type:
        example: user
        type: string
      indexes:
        items:
          $ref: '#/definitions/models.IndexConfig'
        type: array
      properties:
        $ref: '#/definitions/models.PropertySchema'
    required:
    - entity_type
    - properties
    type: object
  handlers.EntitySchemaResponse:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      entity_type:
        example: user
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      indexes:
        items:
          $ref: '#/definitions/models.IndexConfig'
        type: array
      properties:
        $ref: '#/definitions/models.PropertySchema'
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      version:
        example: 1
        type: integer
    type: object
  handlers.RelationRequest:
    properties:
      from_entity_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      from_entity_type:
        example: user
        type: string
      properties:
        type: object
      relation_type:
        example: owns
        type: string
      to_entity_id:
        example: 650e8400-e29b-41d4-a716-446655440001
        type: string
      to_entity_type:
        example: document
        type: string
    required:
    - from_entity_id
    - from_entity_type
    - relation_type
    - to_entity_id
    - to_entity_type
    type: object
  handlers.RelationResponse:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      from_entity_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      from_entity_type:
        example: user
        type: string
      id:
        example: 750e8400-e29b-41d4-a716-446655440002
        type: string
      properties:
        type: object
      relation_type:
        example: owns
        type: string
      to_entity_id:
        example: 650e8400-e29b-41d4-a716-446655440001
        type: string
      to_entity_type:
        example: document
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  handlers.RelationshipSchemaRequest:
    properties:
      cardinality:
        allOf:
        - $ref: '#/definitions/models.CardinalityType'
        enum:
        - one-to-one
        - one-to-many
        - many-to-one
        - many-to-many
      denormalization_config:
        $ref: '#/definitions/models.DenormalizationConfig'
      from_entity_type:
        example: user
        type: string
      properties:
        $ref: '#/definitions/models.PropertySchema'
      relationship_type:
        example: owns
        type: string
      to_entity_type:
        example: document
        type: string
    required:
    - cardinality
    - from_entity_type
    - relationship_type
    - to_entity_type
    type: object
  handlers.RelationshipSchemaResponse:
    properties:
      cardinality:
        allOf:
        - $ref: '#/definitions/models.CardinalityType'
        enum:
        - one-to-one
        - one-to-many
        - many-to-one
        - many-to-many
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      denormalization_config:
        $ref: '#/definitions/models.DenormalizationConfig'
      from_entity_type:
        example: user
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      properties:
        $ref: '#/definitions/models.PropertySchema'
      relationship_type:
        example: owns
        type: string
      to_entity_type:
        example: document
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      version:
        example: 1
        type: integer
    type: object
  middleware.ErrorDetail:
    description: Detailed error information including code, message, and optional
      details
    properties:
      code:
        example: NOT_FOUND
        type: string
      details:
        type: object
      message:
        example: Entity not found
        type: string
      request_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      timestamp:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  middleware.ErrorResponse:
    description: Standard error response format for all API errors
    properties:
      error:
        $ref: '#/definitions/middleware.ErrorDetail'
    type: object
  models.CardinalityType:
    enum:
    - one-to-one
    - one-to-many
    - many-to-one
    - many-to-many
    type: string
    x-enum-varnames:
    - OneToOne
    - OneToMany
    - ManyToOne
    - ManyToMany
  models.DenormalizationConfig:
    properties:
      denormalize_from_to:
        example:
        - title
        - status
        items:
          type: string
        type: array
      denormalize_to_from:
        example:
        - name
        - email
        items:
          type: string
        type: array
      include_relation_data:
        example: false
        type: boolean
      update_on_change:
        example: true
        type: boolean
    type: object
  models.IndexConfig:
    properties:
      fields:
        example:
        - email
        items:
          type: string
        minItems: 1
        type: array
      name:
        example: idx_user_email
        type: string
      type:
        enum:
        - btree
        - hash
        - gin
        - gist
        - vector
        example: btree
        type: string
      unique:
        example: true
        type: boolean
      vector_type:
        example: ivfflat
        type: string
    required:
    - fields
    - name
    - type
    type: object
  models.PropertyDefinition:
    properties:
      constraints:
        type: object
      default:
        type: object
      description:
        example: User's full name
        type: string
      element_type:
        example: string
        type: string
      object_schema:
        $ref: '#/definitions/models.PropertySchema'
      required:
        example: true
        type: boolean
      type:
        enum:
        - string
        - number
        - boolean
        - datetime
        - object
        - array
        - vector
        example: string
        type: string
      vector_dim:
        example: 512
        type: integer
    required:
    - type
    type: object
  models.PropertySchema:
    additionalProperties:
      $ref: '#/definitions/models.PropertyDefinition'
    type: object
  models.SearchHit:
    properties:
      entity_type:
        example: user
        type: string
      highlights:
        type: object
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      properties:
        type: object
      score:
        example: 0.95
        type: number
      urn:
        example: urn:entropic:user:123
        type: string
      vector:
        items:
          type: number
        type: array
    type: object
  models.SearchQuery:
    properties:
      entity_types:
        example:
        - user
        - document
        items:
          type: string
        minItems: 1
        type: array
      facets:
        example:
        - status
        - type
        items:
          type: string
        type: array
      filters:
        type: object
      include_urn:
        example: true
        type: boolean
      limit:
        example: 20
        maximum: 1000
        minimum: 1
        type: integer
      offset:
        example: 0
        minimum: 0
        type: integer
      query:
        example: john doe
        type: string
      sort:
        items:
          $ref: '#/definitions/models.SortOption'
        type: array
    required:
    - entity_types
    type: object
  models.SearchResult:
    properties:
      facets:
        type: object
      hits:
        items:
          $ref: '#/definitions/models.SearchHit'
        type: array
      query:
        type: object
      search_time_ms:
        example: 15
        type: integer
      total_hits:
        example: 100
        type: integer
    type: object
  models.SortOption:
    properties:
      field:
        example: created_at
        type: string
      order:
        allOf:
        - $ref: '#/definitions/models.SortOrder'
        enum:
        - asc
        - desc
    required:
    - field
    - order
    type: object
  models.SortOrder:
    enum:
    - asc
    - desc
    type: string
    x-enum-varnames:
    - SortAsc
    - SortDesc
  models.VectorQuery:
    properties:
      entity_types:
        example:
        - document
        items:
          type: string
        minItems: 1
        type: array
      filters:
        type: object
      include_vectors:
        example: false
        type: boolean
      min_score:
        example: 0.7
        type: number
      top_k:
        example: 10
        maximum: 1000
        minimum: 1
        type: integer
      vector:
        items:
          type: number
        type: array
      vector_field:
        example: embedding
        type: string
    required:
    - entity_types
    - top_k
    - vector
    - vector_field
    type: object
host: localhost:8080
info:
  contact:
    email: support@entropic.io
    name: API Support
    url: http://www.entropic.io/support
  description: A next-generation storage engine with flexible entity-relationship
    model and dual-storage architecture
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Entropic Storage Engine API
  version: "1.0"
paths:
  /api/v1/entities/{entityType}:
    get:
      consumes:
      - application/json
      description: Get a paginated list of entities of a specific type
      parameters:
      - description: Entity Type
        in: path
        name: entityType
        required: true
        type: string
      - default: 20
        description: Limit
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.EntityListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: List entities of a specific type
      tags:
      - entities
    post:
      consumes:
      - application/json
      description: Create a new entity of the specified type
      parameters:
      - description: Entity Type
        in: path
        name: entityType
        required: true
        type: string
      - description: Entity data
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/handlers.EntityRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.EntityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Create a new entity
      tags:
      - entities
  /api/v1/entities/{entityType}/{entityID}:
    delete:
      consumes:
      - application/json
      description: Delete a specific entity by its type and ID
      parameters:
      - description: Entity Type
        in: path
        name: entityType
        required: true
        type: string
      - description: Entity ID
        format: uuid
        in: path
        name: entityID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Delete an entity
      tags:
      - entities
    get:
      consumes:
      - application/json
      description: Get a specific entity by its type and ID
      parameters:
      - description: Entity Type
        in: path
        name: entityType
        required: true
        type: string
      - description: Entity ID
        format: uuid
        in: path
        name: entityID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.EntityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get an entity by ID
      tags:
      - entities
    patch:
      consumes:
      - application/json
      description: Update an existing entity's properties and/or URN
      parameters:
      - description: Entity Type
        in: path
        name: entityType
        required: true
        type: string
      - description: Entity ID
        format: uuid
        in: path
        name: entityID
        required: true
        type: string
      - description: Entity update data
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/handlers.EntityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.EntityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Update an entity
      tags:
      - entities
  /api/v1/entities/{entityType}/{entityID}/relations:
    get:
      consumes:
      - application/json
      description: Get all relations for a specific entity, optionally filtered by
        relation types
      parameters:
      - description: Entity Type
        in: path
        name: entityType
        required: true
        type: string
      - description: Entity ID
        format: uuid
        in: path
        name: entityID
        required: true
        type: string
      - description: Comma-separated list of relation types to filter
        in: query
        name: relation_types
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.RelationResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get relations for an entity
      tags:
      - entities
  /api/v1/relations:
    post:
      consumes:
      - application/json
      description: Create a new relation between two entities
      parameters:
      - description: Relation data
        in: body
        name: relation
        required: true
        schema:
          $ref: '#/definitions/handlers.RelationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.RelationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Create a new relation
      tags:
      - relations
  /api/v1/relations/{relationID}:
    delete:
      consumes:
      - application/json
      description: Delete a specific relation by its ID
      parameters:
      - description: Relation ID
        format: uuid
        in: path
        name: relationID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Delete a relation
      tags:
      - relations
    get:
      consumes:
      - application/json
      description: Get a specific relation by its ID
      parameters:
      - description: Relation ID
        format: uuid
        in: path
        name: relationID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RelationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get a relation by ID
      tags:
      - relations
  /api/v1/schemas/entities:
    get:
      consumes:
      - application/json
      description: Get a list of all entity schemas in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.EntitySchemaResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: List all entity schemas
      tags:
      - schemas
    post:
      consumes:
      - application/json
      description: Create a new schema for an entity type
      parameters:
      - description: Entity schema data
        in: body
        name: schema
        required: true
        schema:
          $ref: '#/definitions/handlers.EntitySchemaRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.EntitySchemaResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Create an entity schema
      tags:
      - schemas
  /api/v1/schemas/entities/{entityType}:
    delete:
      consumes:
      - application/json
      description: Delete the schema for an entity type. This operation cannot be
        undone.
      parameters:
      - description: Entity Type
        in: path
        name: entityType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Delete an entity schema
      tags:
      - schemas
    get:
      consumes:
      - application/json
      description: Get the schema for a specific entity type
      parameters:
      - description: Entity Type
        in: path
        name: entityType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.EntitySchemaResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get an entity schema
      tags:
      - schemas
    put:
      consumes:
      - application/json
      description: Update the schema for an existing entity type
      parameters:
      - description: Entity Type
        in: path
        name: entityType
        required: true
        type: string
      - description: Entity schema update data
        in: body
        name: schema
        required: true
        schema:
          $ref: '#/definitions/handlers.EntitySchemaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.EntitySchemaResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Update an entity schema
      tags:
      - schemas
  /api/v1/schemas/relationships:
    get:
      consumes:
      - application/json
      description: Get a list of all relationship schemas in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.RelationshipSchemaResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: List all relationship schemas
      tags:
      - schemas
    post:
      consumes:
      - application/json
      description: Create a new schema for a relationship type
      parameters:
      - description: Relationship schema data
        in: body
        name: schema
        required: true
        schema:
          $ref: '#/definitions/handlers.RelationshipSchemaRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.RelationshipSchemaResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Create a relationship schema
      tags:
      - schemas
  /api/v1/schemas/relationships/{relationshipType}:
    delete:
      consumes:
      - application/json
      description: Delete the schema for a relationship type. This operation cannot
        be undone.
      parameters:
      - description: Relationship Type
        in: path
        name: relationshipType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Delete a relationship schema
      tags:
      - schemas
    get:
      consumes:
      - application/json
      description: Get the schema for a specific relationship type
      parameters:
      - description: Relationship Type
        in: path
        name: relationshipType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RelationshipSchemaResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get a relationship schema
      tags:
      - schemas
    put:
      consumes:
      - application/json
      description: Update the schema for an existing relationship type
      parameters:
      - description: Relationship Type
        in: path
        name: relationshipType
        required: true
        type: string
      - description: Relationship schema update data
        in: body
        name: schema
        required: true
        schema:
          $ref: '#/definitions/handlers.RelationshipSchemaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RelationshipSchemaResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Update a relationship schema
      tags:
      - schemas
  /api/v1/search:
    post:
      consumes:
      - application/json
      description: Search for entities using text search with optional filters and
        facets
      parameters:
      - description: Search query
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/models.SearchQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SearchResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Search entities
      tags:
      - search
  /api/v1/search/vector:
    post:
      consumes:
      - application/json
      description: Search for entities using vector similarity
      parameters:
      - description: Vector search query
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/models.VectorQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SearchResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Vector similarity search
      tags:
      - search
  /health:
    get:
      consumes:
      - application/json
      description: Check the health status of the service and its dependencies
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Service is unhealthy
          schema:
            additionalProperties: true
            type: object
      summary: Health check
      tags:
      - health
  /metrics:
    get:
      consumes:
      - application/json
      description: Get performance metrics and statistics for the service
      produces:
      - application/json
      responses:
        "200":
          description: Service metrics including cache stats, transaction stats, and
            timestamp
          schema:
            additionalProperties: true
            type: object
      summary: Get service metrics
      tags:
      - monitoring
  /ready:
    get:
      consumes:
      - application/json
      description: Check if the service is ready to accept requests
      produces:
      - application/json
      responses:
        "200":
          description: Service is ready
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Service is not ready
      summary: Readiness check
      tags:
      - health
schemes:
- http
- https
swagger: "2.0"
