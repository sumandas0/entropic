{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "A next-generation storage engine with flexible entity-relationship model and dual-storage architecture",
        "title": "Entropic Storage Engine API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.entropic.io/support",
            "email": "support@entropic.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/api/v1/entities/{entityType}": {
            "get": {
                "description": "Get a paginated list of entities of a specific type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "List entities of a specific type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity Type",
                        "name": "entityType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.EntityListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new entity of the specified type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "Create a new entity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity Type",
                        "name": "entityType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Entity data",
                        "name": "entity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.EntityRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.EntityResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/entities/{entityType}/{entityID}": {
            "get": {
                "description": "Get a specific entity by its type and ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "Get an entity by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity Type",
                        "name": "entityType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Entity ID",
                        "name": "entityID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.EntityResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a specific entity by its type and ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "Delete an entity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity Type",
                        "name": "entityType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Entity ID",
                        "name": "entityID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update an existing entity's properties and/or URN",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "Update an entity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity Type",
                        "name": "entityType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Entity ID",
                        "name": "entityID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Entity update data",
                        "name": "entity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.EntityRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.EntityResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/entities/{entityType}/{entityID}/relations": {
            "get": {
                "description": "Get all relations for a specific entity, optionally filtered by relation types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "Get relations for an entity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity Type",
                        "name": "entityType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Entity ID",
                        "name": "entityID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of relation types to filter",
                        "name": "relation_types",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.RelationResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/relations": {
            "post": {
                "description": "Create a new relation between two entities",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relations"
                ],
                "summary": "Create a new relation",
                "parameters": [
                    {
                        "description": "Relation data",
                        "name": "relation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RelationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.RelationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/relations/{relationID}": {
            "get": {
                "description": "Get a specific relation by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relations"
                ],
                "summary": "Get a relation by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Relation ID",
                        "name": "relationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.RelationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a specific relation by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relations"
                ],
                "summary": "Delete a relation",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Relation ID",
                        "name": "relationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/schemas/entities": {
            "get": {
                "description": "Get a list of all entity schemas in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "List all entity schemas",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.EntitySchemaResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new schema for an entity type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "Create an entity schema",
                "parameters": [
                    {
                        "description": "Entity schema data",
                        "name": "schema",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.EntitySchemaRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.EntitySchemaResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/schemas/entities/{entityType}": {
            "get": {
                "description": "Get the schema for a specific entity type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "Get an entity schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity Type",
                        "name": "entityType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.EntitySchemaResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the schema for an existing entity type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "Update an entity schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity Type",
                        "name": "entityType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Entity schema update data",
                        "name": "schema",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.EntitySchemaRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.EntitySchemaResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the schema for an entity type. This operation cannot be undone.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "Delete an entity schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity Type",
                        "name": "entityType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/schemas/relationships": {
            "get": {
                "description": "Get a list of all relationship schemas in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "List all relationship schemas",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.RelationshipSchemaResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new schema for a relationship type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "Create a relationship schema",
                "parameters": [
                    {
                        "description": "Relationship schema data",
                        "name": "schema",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RelationshipSchemaRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.RelationshipSchemaResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/schemas/relationships/{relationshipType}": {
            "get": {
                "description": "Get the schema for a specific relationship type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "Get a relationship schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationship Type",
                        "name": "relationshipType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.RelationshipSchemaResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the schema for an existing relationship type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "Update a relationship schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationship Type",
                        "name": "relationshipType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Relationship schema update data",
                        "name": "schema",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RelationshipSchemaRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.RelationshipSchemaResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the schema for a relationship type. This operation cannot be undone.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "Delete a relationship schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relationship Type",
                        "name": "relationshipType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/search": {
            "post": {
                "description": "Search for entities using text search with optional filters and facets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Search entities",
                "parameters": [
                    {
                        "description": "Search query",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SearchQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SearchResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/search/vector": {
            "post": {
                "description": "Search for entities using vector similarity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Vector similarity search",
                "parameters": [
                    {
                        "description": "Vector search query",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VectorQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SearchResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check the health status of the service and its dependencies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "Service is unhealthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Get performance metrics and statistics for the service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Get service metrics",
                "responses": {
                    "200": {
                        "description": "Service metrics including cache stats, transaction stats, and timestamp",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ready": {
            "get": {
                "description": "Check if the service is ready to accept requests",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Readiness check",
                "responses": {
                    "200": {
                        "description": "Service is ready",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "Service is not ready"
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.EntityListResponse": {
            "type": "object",
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.EntityResponse"
                    }
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "offset": {
                    "type": "integer",
                    "example": 0
                },
                "total": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "handlers.EntityRequest": {
            "type": "object",
            "required": [
                "properties",
                "urn"
            ],
            "properties": {
                "properties": {
                    "type": "object"
                },
                "urn": {
                    "type": "string",
                    "example": "urn:entropic:user:123"
                }
            }
        },
        "handlers.EntityResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "entity_type": {
                    "type": "string",
                    "example": "user"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "properties": {
                    "type": "object"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "urn": {
                    "type": "string",
                    "example": "urn:entropic:user:123"
                },
                "version": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.EntitySchemaRequest": {
            "type": "object",
            "required": [
                "entity_type",
                "properties"
            ],
            "properties": {
                "entity_type": {
                    "type": "string",
                    "example": "user"
                },
                "indexes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.IndexConfig"
                    }
                },
                "properties": {
                    "$ref": "#/definitions/models.PropertySchema"
                }
            }
        },
        "handlers.EntitySchemaResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "entity_type": {
                    "type": "string",
                    "example": "user"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "indexes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.IndexConfig"
                    }
                },
                "properties": {
                    "$ref": "#/definitions/models.PropertySchema"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "version": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.RelationRequest": {
            "type": "object",
            "required": [
                "from_entity_id",
                "from_entity_type",
                "relation_type",
                "to_entity_id",
                "to_entity_type"
            ],
            "properties": {
                "from_entity_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "from_entity_type": {
                    "type": "string",
                    "example": "user"
                },
                "properties": {
                    "type": "object"
                },
                "relation_type": {
                    "type": "string",
                    "example": "owns"
                },
                "to_entity_id": {
                    "type": "string",
                    "example": "650e8400-e29b-41d4-a716-446655440001"
                },
                "to_entity_type": {
                    "type": "string",
                    "example": "document"
                }
            }
        },
        "handlers.RelationResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "from_entity_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "from_entity_type": {
                    "type": "string",
                    "example": "user"
                },
                "id": {
                    "type": "string",
                    "example": "750e8400-e29b-41d4-a716-446655440002"
                },
                "properties": {
                    "type": "object"
                },
                "relation_type": {
                    "type": "string",
                    "example": "owns"
                },
                "to_entity_id": {
                    "type": "string",
                    "example": "650e8400-e29b-41d4-a716-446655440001"
                },
                "to_entity_type": {
                    "type": "string",
                    "example": "document"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                }
            }
        },
        "handlers.RelationshipSchemaRequest": {
            "type": "object",
            "required": [
                "cardinality",
                "from_entity_type",
                "relationship_type",
                "to_entity_type"
            ],
            "properties": {
                "cardinality": {
                    "enum": [
                        "one-to-one",
                        "one-to-many",
                        "many-to-one",
                        "many-to-many"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CardinalityType"
                        }
                    ]
                },
                "denormalization_config": {
                    "$ref": "#/definitions/models.DenormalizationConfig"
                },
                "from_entity_type": {
                    "type": "string",
                    "example": "user"
                },
                "properties": {
                    "$ref": "#/definitions/models.PropertySchema"
                },
                "relationship_type": {
                    "type": "string",
                    "example": "owns"
                },
                "to_entity_type": {
                    "type": "string",
                    "example": "document"
                }
            }
        },
        "handlers.RelationshipSchemaResponse": {
            "type": "object",
            "properties": {
                "cardinality": {
                    "enum": [
                        "one-to-one",
                        "one-to-many",
                        "many-to-one",
                        "many-to-many"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CardinalityType"
                        }
                    ]
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "denormalization_config": {
                    "$ref": "#/definitions/models.DenormalizationConfig"
                },
                "from_entity_type": {
                    "type": "string",
                    "example": "user"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "properties": {
                    "$ref": "#/definitions/models.PropertySchema"
                },
                "relationship_type": {
                    "type": "string",
                    "example": "owns"
                },
                "to_entity_type": {
                    "type": "string",
                    "example": "document"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                },
                "version": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "middleware.ErrorDetail": {
            "description": "Detailed error information including code, message, and optional details",
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "NOT_FOUND"
                },
                "details": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "Entity not found"
                },
                "request_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                }
            }
        },
        "middleware.ErrorResponse": {
            "description": "Standard error response format for all API errors",
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/middleware.ErrorDetail"
                }
            }
        },
        "models.CardinalityType": {
            "type": "string",
            "enum": [
                "one-to-one",
                "one-to-many",
                "many-to-one",
                "many-to-many"
            ],
            "x-enum-varnames": [
                "OneToOne",
                "OneToMany",
                "ManyToOne",
                "ManyToMany"
            ]
        },
        "models.DenormalizationConfig": {
            "type": "object",
            "properties": {
                "denormalize_from_to": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "title",
                        "status"
                    ]
                },
                "denormalize_to_from": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "name",
                        "email"
                    ]
                },
                "include_relation_data": {
                    "type": "boolean",
                    "example": false
                },
                "update_on_change": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "models.IndexConfig": {
            "type": "object",
            "required": [
                "fields",
                "name",
                "type"
            ],
            "properties": {
                "fields": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "email"
                    ]
                },
                "name": {
                    "type": "string",
                    "example": "idx_user_email"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "btree",
                        "hash",
                        "gin",
                        "gist",
                        "vector"
                    ],
                    "example": "btree"
                },
                "unique": {
                    "type": "boolean",
                    "example": true
                },
                "vector_type": {
                    "type": "string",
                    "example": "ivfflat"
                }
            }
        },
        "models.PropertyDefinition": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "constraints": {
                    "type": "object"
                },
                "default": {
                    "type": "object"
                },
                "description": {
                    "type": "string",
                    "example": "User's full name"
                },
                "element_type": {
                    "type": "string",
                    "example": "string"
                },
                "object_schema": {
                    "$ref": "#/definitions/models.PropertySchema"
                },
                "required": {
                    "type": "boolean",
                    "example": true
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "string",
                        "number",
                        "boolean",
                        "datetime",
                        "object",
                        "array",
                        "vector"
                    ],
                    "example": "string"
                },
                "vector_dim": {
                    "type": "integer",
                    "example": 512
                }
            }
        },
        "models.PropertySchema": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/models.PropertyDefinition"
            }
        },
        "models.SearchHit": {
            "type": "object",
            "properties": {
                "entity_type": {
                    "type": "string",
                    "example": "user"
                },
                "highlights": {
                    "type": "object"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "properties": {
                    "type": "object"
                },
                "score": {
                    "type": "number",
                    "example": 0.95
                },
                "urn": {
                    "type": "string",
                    "example": "urn:entropic:user:123"
                },
                "vector": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            }
        },
        "models.SearchQuery": {
            "type": "object",
            "required": [
                "entity_types"
            ],
            "properties": {
                "entity_types": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "user",
                        "document"
                    ]
                },
                "facets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "status",
                        "type"
                    ]
                },
                "filters": {
                    "type": "object"
                },
                "include_urn": {
                    "type": "boolean",
                    "example": true
                },
                "limit": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1,
                    "example": 20
                },
                "offset": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 0
                },
                "query": {
                    "type": "string",
                    "example": "john doe"
                },
                "sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SortOption"
                    }
                }
            }
        },
        "models.SearchResult": {
            "type": "object",
            "properties": {
                "facets": {
                    "type": "object"
                },
                "hits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SearchHit"
                    }
                },
                "query": {
                    "type": "object"
                },
                "search_time_ms": {
                    "type": "integer",
                    "example": 15
                },
                "total_hits": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "models.SortOption": {
            "type": "object",
            "required": [
                "field",
                "order"
            ],
            "properties": {
                "field": {
                    "type": "string",
                    "example": "created_at"
                },
                "order": {
                    "enum": [
                        "asc",
                        "desc"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SortOrder"
                        }
                    ]
                }
            }
        },
        "models.SortOrder": {
            "type": "string",
            "enum": [
                "asc",
                "desc"
            ],
            "x-enum-varnames": [
                "SortAsc",
                "SortDesc"
            ]
        },
        "models.VectorQuery": {
            "type": "object",
            "required": [
                "entity_types",
                "top_k",
                "vector",
                "vector_field"
            ],
            "properties": {
                "entity_types": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "document"
                    ]
                },
                "filters": {
                    "type": "object"
                },
                "include_vectors": {
                    "type": "boolean",
                    "example": false
                },
                "min_score": {
                    "type": "number",
                    "example": 0.7
                },
                "top_k": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1,
                    "example": 10
                },
                "vector": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "vector_field": {
                    "type": "string",
                    "example": "embedding"
                }
            }
        }
    }
}