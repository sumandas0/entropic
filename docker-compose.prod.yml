# Production Docker Compose configuration
version: '3.8'

services:
  # Production PostgreSQL with enhanced security and performance
  postgres:
    image: pgvector/pgvector:pg17
    container_name: entropic-postgres-prod
    environment:
      POSTGRES_DB: entropic
      POSTGRES_USER: entropic_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --auth-host=md5"
    ports:
      # Don't expose to host in production
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - entropic-prod-network
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U entropic_user -d entropic"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    # Security: Run as non-root user
    user: postgres
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Production Typesense with clustering support
  typesense:
    image: typesense/typesense:28.0
    container_name: entropic-typesense-prod
    environment:
      TYPESENSE_DATA_DIR: /data
      TYPESENSE_API_KEY_FILE: /run/secrets/typesense_api_key
      TYPESENSE_ENABLE_CORS: false
      TYPESENSE_LOG_LEVEL: WARN
    volumes:
      - typesense_data_prod:/data
      - ./typesense-prod.ini:/etc/typesense/typesense-server.ini:ro
    networks:
      - entropic-prod-network
    secrets:
      - typesense_api_key
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8108/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Production Redis cluster
  redis:
    image: redis:7-alpine
    container_name: entropic-redis-prod
    volumes:
      - redis_data_prod:/data
      - ./redis.conf:/etc/redis/redis.conf:ro
    networks:
      - entropic-prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: ["redis-server", "/etc/redis/redis.conf"]
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Production Entropic application (multiple replicas)
  entropic:
    image: entropic/server:${VERSION:-latest}
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    environment:
      # Server configuration
      ENTROPIC_SERVER_HOST: 0.0.0.0
      ENTROPIC_SERVER_PORT: 8080
      
      # Database configuration
      ENTROPIC_DATABASE_HOST: postgres
      ENTROPIC_DATABASE_PORT: 5432
      ENTROPIC_DATABASE_DATABASE: entropic
      ENTROPIC_DATABASE_USERNAME: entropic_user
      ENTROPIC_DATABASE_PASSWORD_FILE: /run/secrets/postgres_password
      ENTROPIC_DATABASE_SSL_MODE: require
      ENTROPIC_DATABASE_MAX_OPEN_CONNS: 20
      ENTROPIC_DATABASE_MAX_IDLE_CONNS: 5
      ENTROPIC_DATABASE_MIGRATE_ON_START: false
      
      # Search configuration
      ENTROPIC_SEARCH_URL: http://typesense:8108
      ENTROPIC_SEARCH_API_KEY_FILE: /run/secrets/typesense_api_key
      
      # Lock configuration
      ENTROPIC_LOCK_TYPE: redis
      ENTROPIC_LOCK_REDIS_HOST: redis
      ENTROPIC_LOCK_REDIS_PORT: 6379
      
      # Logging configuration
      ENTROPIC_LOGGING_LEVEL: warn
      ENTROPIC_LOGGING_FORMAT: json
      
      # Security configuration
      ENTROPIC_SECURITY_RATE_LIMIT_ENABLED: true
      ENTROPIC_SECURITY_RATE_LIMIT_RATE: 50
      ENTROPIC_SECURITY_RATE_LIMIT_PERIOD: 1m
    volumes:
      - entropic_logs_prod:/app/logs
      - ./entropic.prod.yaml:/app/entropic.yaml:ro
    networks:
      - entropic-prod-network
    secrets:
      - postgres_password
      - typesense_api_key
    depends_on:
      postgres:
        condition: service_healthy
      typesense:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "./entropic-server", "version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Production Nginx load balancer
  nginx:
    image: nginx:alpine
    container_name: entropic-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    networks:
      - entropic-prod-network
    depends_on:
      - entropic
    restart: unless-stopped
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Monitoring stack (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: entropic-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - entropic-prod-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: entropic-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_admin_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - entropic-prod-network
    secrets:
      - grafana_admin_password
    restart: unless-stopped
    profiles:
      - monitoring

# Production secrets
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  typesense_api_key:
    file: ./secrets/typesense_api_key.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt

# Production volumes with specific drivers and options
volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgres
  typesense_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/typesense
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/redis
  entropic_logs_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /logs/entropic
  nginx_logs_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /logs/nginx
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Production network with custom configuration
networks:
  entropic-prod-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: entropic-prod
    ipam:
      config:
        - subnet: 172.30.0.0/16